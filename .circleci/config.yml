version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            apk add --update ansible

jobs:
  create_infrastructure:
    docker:
      - image: cimg/aws:2022.11
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
      #         --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text)
      #       echo $BACKEND_PUBLIC_IP >> ~/inventory
      #       cat inventory
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - inventory
      # - destroy_environment

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["ad:9d:92:4b:95:24:77:07:5f:aa:65:db:20:75:8f:6e"]
      - install_ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main.yml

  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          when: on_fail
          command: |
            return 1
      - destroy_environment

workflows:
  my-workflow:
    jobs:
      - create_infrastructure
      - smoke_test:
          requires: [create_infrastructure]
      # - configure_infrastructure
